
#include <bits/stdc++.h> 
using namespace std; 

/*  in dp[i][j]-  'i' denotes mask in which 'set bits' denotes  total people standing at left side of bridge 
and 'j' denotes the turn that represent on which side we have to send people either from left to right(0) or from right to left(1) */

int dp[1 << 20][2]; 

//function to find minimum time 

int findTime(int arr[], int n) 
{ 
	// Find the mask of 'n' number of people 
	int mask = (1 << n) - 1; 

	// Initialize all entries in dp as -1 
	memset(dp, -1, sizeof(dp)); 

	return findMinTime(mask, 0, arr, n); 
} 

/* Utility function to find total time required to send people to other side of bridge */
int findMinTime(int ltmsk, bool turn, int arr[], int& n) 
{ 

	// If all of them have been transfered 
	if (!ltmsk) 
		return 0; 

	int& res = dp[ltmsk][turn]; 

	// If we have solved this subproblem at this point, return the answer.
	
	if (~res) 
		return res; 

	// Calculate the mask of right side of people 
	int rtmsk = ((1 << n) - 1) ^ ltmsk; 

	/* if turn == 1 means currently people are at right side, thus we need to transfer	people to the left side */
	if (turn == 1) { 
		int minRow = INT_MAX, person; 
		for (int i = 0; i < n; ++i) { 

			// Select one people whose time is less 
			// among all others present at right 
			// side 
			if (rtmsk & (1 << i)) { 
				if (minRow > arr[i]) { 
					person = i; 
					minRow = arr[i]; 
				} 
			} 
		} 

		// The person needs to be added to answer and recurse for next turn after initializing that person at left side 
		res = arr[person] + findMinTime(ltmskk | (1 << person), 
										turn ^ 1, arr, n); 
	} 
	else { 

		// __builtin_popcount() is inbuilt gcc function which will count total set bits in 'ltmsk' 
		if (__builtin_popcount(ltmsk) == 1) { 
			for (int i = 0; i < n; ++i) { 

				// Since one person is present at left side, thus return that person only 
				if (ltmsk & (1 << i)) { 
					res = arr[i]; 
					break; 
				} 
			} 
		} 
		else { 

			// try sending every pair to the right side 

			// Initialize the result with maximum value 
			res = INT_MAX; 
			for (int i = 0; i < n; ++i) { 

				// If ith person is not present then skip the rest loop 
				if (!(ltmsk & (1 << i))) 
					continue; 

				for (int j = i + 1; j < n; ++j) { 
					if (ltmsk & (1 << j)) { 

						// Find maximum integer(slowest person's time) 
						int val = max(arr[i], arr[j]); 

						// Recurse for other people after un-setting the ith and jth bit of left-mask 
						val += findMinTime(ltmsk ^ (1 << i) ^ (1 << j), 
													turn ^ 1, arr, n); 
						// Find minimum answer among all chosen values 
						res = min(res, val); 
					} 
				} 
			} 
		} 
	} 
	return res; 
} 



// Driver program 
int main() 
{ 
	int arr[] = { 15, 25, 35 }; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	cout << findTime(arr, n); 
	return 0; 
}
